/*notas
by Roberto Coria
El temporizador esta 
acabando con la memoria ram y sin este funciona mucho mejor
*/
//Para el cambio de cancion
#define DEBUG false
#define DEBUG_SERIAL if(DEBUG)Serial
//libreria la pantalla
#include <Adafruit_SH1106.h> //LIBRERIA
#define OLED_R 6 //VARIABLE DEFINIDA

//para codigo del mp3 
#include <Adafruit_GFX.h>
#include <Adafruit_GrayOLED.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
#include <gfxfont.h>

//varias
#include "Arduino.h"
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"

//para las ordenes de los botones
#include <Bounce2.h>

//VARIABLES PARA REPRODUCCION 
#define buttonBpin 3
#define buttonApin 2

//VARIABLES PARA VOLUMEN
int VolDown = 8;
int VolUp = 9;

//lecturas para resultados
int lectura = 2;
int lecturavol = 40;

//para delay de mostrar pantalla
int dly = 700;

//ordenes predefinidas por la libreria bounce
Bounce PreviousDebouncer = Bounce();
Bounce NextDebouncer = Bounce();
Bounce VolDownDebouncer = Bounce();
Bounce VolUpDebouncer = Bounce();


//iniciar el mp3
SoftwareSerial mySoftwareSerial(10, 11); // RX, TX
DFRobotDFPlayerMini myDFPlayer; // CAMBIAR EL NOMBRE
void printDetail(uint8_t type, int value);

//LAS CONECCIONES SON: VCC = 5V; GND = GND; SDA = A4; SCL = A5 
Adafruit_SH1106 display(OLED_R); //OBJETO DEFINIDO CON LA VARIABLE EN PARENTESIS

//MATRIZ DE NUESTRA IMAGEN
//CAMBIAR EL NOMBRE O LA VARIABLE QUE ES LO ESTA DESPUES DE char--> "      ". 
const unsigned char UPY[] PROGMEM = {
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x7f, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x01, 0xff, 0xe2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x09, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfd, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x0e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x05, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x04, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0xfa, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfd, 0xfb, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0xf2, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe8, 0x20, 0x10, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x0c, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x08, 0x00, 0x0f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x18, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xbc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe1, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xb0, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x30, 0x10, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x30, 0x30, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x30, 0x10, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char BB [] PROGMEM = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x08, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x9f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xdf, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x87, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x8f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x1f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x1f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x0f, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x5f, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf3, 0xbf, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x9f, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x1f, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf7, 0x3f, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xbf, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xbf, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfd, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf5, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char CN [] PROGMEM = {
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x8f, 0xfe, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xb7, 0xfd, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfb, 0xfd, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfb, 0xfb, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfb, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0xfb, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0xf7, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0xf7, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xbf, 0xf7, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xbe, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xde, 0x1f, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xef, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfb, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char OD [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x06, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {
  //comunicacion arduino the MP3
  mySoftwareSerial.begin(9600);
  Serial.begin(9600);
  //declaracion de los pines de cambio
  pinMode(buttonBpin,INPUT_PULLUP); 
  PreviousDebouncer.attach(buttonBpin);
  PreviousDebouncer.interval(1); // interval in ms
  pinMode(buttonApin,INPUT_PULLUP); 
  NextDebouncer.attach(buttonApin);
  NextDebouncer.interval(1); // interval in ms
   //declaracion de los pines de volumen
  pinMode(VolDown,INPUT_PULLUP);
  pinMode(VolUp,INPUT_PULLUP);
  

  //iniciar display 
  display.begin(SH1106_SWITCHCAPVCC, 0x3C); //INICIALIZAR EL DISPLAY
  display.clearDisplay(); //LIMPIAR DISPLAY
  display.setRotation(0); //ROTACION DE LA IMAGEN
  display.setCursor(1,1);//UBICACION EN X & Y
  display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
  display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
//================================================

  display.println();
  
  if (!myDFPlayer.begin(mySoftwareSerial)) {  //Use softwareSerial to communicate with mp3.
    display.clearDisplay();

   
    while(true);
  }
 
  

  myDFPlayer.volume(30);  //volumen de 0 a 30
  myDFPlayer.play();  //reproducir

}

void loop() {
  //variable numerica para el uso de cambio de pantalla
 if (digitalRead(buttonApin) == LOW)
  {
    delay(100);
    lectura = lectura -1 ;
    
  }
  if (digitalRead(buttonBpin) == LOW)
  {
    delay(100);
    lectura = lectura +1 ; 
  }
  //variable para volumen
  if (digitalRead(VolDown) == LOW)
  {
     myDFPlayer.volumeDown();
  }
  if (digitalRead(VolUp) == LOW)
  {
     myDFPlayer.volumeUp();
  }


      //monitoreo
       Serial.println ("Default Value");
       Serial.println (lectura);
       Serial.println ("Input"); 
       Serial.println (lectura); 
       Serial.println ("volumen"); 
       Serial.println(myDFPlayer.readVolume());
//orden de actualizacion y reprodcuccion de pista
PreviousDebouncer.update();
  if ( PreviousDebouncer.fell()) {
    DEBUG_SERIAL.print(("Previous"));
    myDFPlayer.next();
  }
 
  NextDebouncer.update();
  if ( NextDebouncer.fell()) {
    DEBUG_SERIAL.print(("next"));
    myDFPlayer.previous();
  }
 // limitantes para las portadas del display
   if (lectura > 9)
      {lectura = 1;}
   
  if (lectura < 1)
     {lectura = 2;}

     //gracias a este switch se elije que portada reproducir
switch(lectura){   
   case 1 :   
       delay(dly);
      //IMAGEN 1
       display.clearDisplay();
       display.setRotation(0); //ROTACION DE LA IMAGEN
       display.setCursor(1,1);//UBICACION EN X & Y
       display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
       display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
       display.println("BACK IN TIME"); //IMPRIMIR
       display.setCursor(5,5);//UBICACION EN X & Y
       display.println("========================="); //IMPRIMIR
      //AJUSTAR ESTAS MEDIDAS               //"MUY IMPORTANTE PRESTAR ATENCION A LAS DIMENSIONES Y AJUSTAR EN EL GENERADOR DE MATRICES" 
       display.drawBitmap(0,15,UPY,64,64,BLACK,WHITE); //IMPRIMIR, SE IMPRIME EN 0 & 0, LA VARIABLE, ""EL TAMAÑO DE LA IMAGEN "", COLORES 
        //esto esta repetido en cada case
        //parte del cronometro
        display.setCursor(81,20);
         display.setTextSize(1);
         display.println(millis()/1000);
         display.setCursor(70,40);
         display.setTextSize(1);
         display.println("seconds");
         //fin de parte del cronometro
       display.display();//LLAMAR EL DISPLAY
       display.clearDisplay();
         break;    
    case 2 :   
       delay(dly);
      //IMAGEN 1
       display.clearDisplay();
       display.setRotation(0); //ROTACION DE LA IMAGEN
       display.setCursor(1,1);//UBICACION EN X & Y
       display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
       display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
       display.println("BACK IN TIME"); //IMPRIMIR
       display.setCursor(5,5);//UBICACION EN X & Y
       display.println("========================="); //IMPRIMIR
      //AJUSTAR ESTAS MEDIDAS               //"MUY IMPORTANTE PRESTAR ATENCION A LAS DIMENSIONES Y AJUSTAR EN EL GENERADOR DE MATRICES" 
       display.drawBitmap(0,15,UPY,64,64,BLACK,WHITE); //IMPRIMIR, SE IMPRIME EN 0 & 0, LA VARIABLE, ""EL TAMAÑO DE LA IMAGEN "", COLORES 
        //esto esta repetido en cada case
        //parte del cronometro
        display.setCursor(81,20);
         display.setTextSize(1);
         display.println(millis()/1000);
         display.setCursor(70,40);
         display.setTextSize(1);
         display.println("seconds");
         //fin de parte del cronometro
       display.display();//LLAMAR EL DISPLAY
       display.clearDisplay();
       
         break;    
          case 3 :   
      
      //IMAGEN 1
       display.clearDisplay();
       display.setRotation(0); //ROTACION DE LA IMAGEN
       display.setCursor(1,1);//UBICACION EN X & Y
       display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
       display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
       display.println("BACK IN TIME"); //IMPRIMIR
       display.setCursor(5,5);//UBICACION EN X & Y
       display.println("========================="); //IMPRIMIR
      //AJUSTAR ESTAS MEDIDAS               //"MUY IMPORTANTE PRESTAR ATENCION A LAS DIMENSIONES Y AJUSTAR EN EL GENERADOR DE MATRICES" 
       display.drawBitmap(0,15,UPY,64,64,BLACK,WHITE); //IMPRIMIR, SE IMPRIME EN 0 & 0, LA VARIABLE, ""EL TAMAÑO DE LA IMAGEN "", COLORES 
        display.setCursor(81,20);
         display.setTextSize(1);
         display.println(millis()/1000);
         display.setCursor(70,40);
         display.setTextSize(1);
         display.println("seconds");
       display.display();//LLAMAR EL DISPLAY
       display.clearDisplay();
       
         break;  
          case 4:
       delay(dly);
      //IMAGEN 2
       display.clearDisplay();
       display.setRotation(0); //ROTACION DE LA IMAGEN
       display.setCursor(1,1);//UBICACION EN X & Y
       display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
       display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
       display.println("HASTA LOS DIENTES"); //IMPRIMIR
       display.setCursor(5,5);//UBICACION EN X & Y
       display.println("========================="); //IMPRIMIR
      //AJUSTAR ESTAS MEDIDAS               //"MUY IMPORTANTE PRESTAR ATENCION A LAS DIMENSIONES Y AJUSTAR EN EL GENERADOR DE MATRICES" 
       display.drawBitmap(0,15,BB,64,64,BLACK,WHITE); //IMPRIMIR, SE IMPRIME EN 0 & 0, LA VARIABLE, ""EL TAMAÑO DE LA IMAGEN "", COLORES 
        display.setCursor(81,20);
         display.setTextSize(1);
         display.println(millis()/1000);
         display.setCursor(70,40);
         display.setTextSize(1);
         display.println("seconds");
       display.display();//LLAMAR EL DISPLAY
       display.clearDisplay();
         break;
    case 5:
      
      //IMAGEN 2
       display.clearDisplay();
       display.setRotation(0); //ROTACION DE LA IMAGEN
       display.setCursor(1,1);//UBICACION EN X & Y
       display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
       display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
       display.println("HASTA LOS DIENTES"); //IMPRIMIR
       display.setCursor(5,5);//UBICACION EN X & Y
       display.println("========================="); //IMPRIMIR
      //AJUSTAR ESTAS MEDIDAS               //"MUY IMPORTANTE PRESTAR ATENCION A LAS DIMENSIONES Y AJUSTAR EN EL GENERADOR DE MATRICES" 
       display.drawBitmap(0,15,BB,64,64,BLACK,WHITE); //IMPRIMIR, SE IMPRIME EN 0 & 0, LA VARIABLE, ""EL TAMAÑO DE LA IMAGEN "", COLORES 
        display.setCursor(81,20);
         display.setTextSize(1);
         display.println(millis()/1000);
         display.setCursor(70,40);
         display.setTextSize(1);
         display.println("seconds");
       display.display();//LLAMAR EL DISPLAY
       display.clearDisplay();
         break;
         case 6:
  delay(dly);
       //IMAGEN 3
       display.clearDisplay();
       display.setRotation(0); //ROTACION DE LA IMAGEN
       display.setCursor(1,1);//UBICACION EN X & Y
       display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
       display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
       display.println("TITI ME PREGUNTO"); //IMPRIMIR
       display.setCursor(5,5);//UBICACION EN X & Y
       display.println("========================="); //IMPRIMIR
       //AJUSTAR ESTAS MEDIDAS               //"MUY IMPORTANTE PRESTAR ATENCION A LAS DIMENSIONES Y AJUSTAR EN EL GENERADOR DE MATRICES" 
        display.drawBitmap(0,15,CN,64,49,BLACK,WHITE); //IMPRIMIR, SE IMPRIME EN 0 & 0, LA VARIABLE, ""EL TAMAÑO DE LA IMAGEN "", COLORES 
        display.setCursor(81,20);
         display.setTextSize(1);
         display.println(millis()/1000);
         display.setCursor(70,40);
         display.setTextSize(1);
         display.println("seconds");
        display.display();//LLAMAR EL DISPLAY
        display.clearDisplay(); 
           break;
    case 7:
  
       //IMAGEN 3
       display.clearDisplay();
       display.setRotation(0); //ROTACION DE LA IMAGEN
       display.setCursor(1,1);//UBICACION EN X & Y
       display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
       display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
       display.println("TITI ME PREGUNTO"); //IMPRIMIR
       display.setCursor(5,5);//UBICACION EN X & Y
       display.println("========================="); //IMPRIMIR
       //AJUSTAR ESTAS MEDIDAS               //"MUY IMPORTANTE PRESTAR ATENCION A LAS DIMENSIONES Y AJUSTAR EN EL GENERADOR DE MATRICES" 
        display.drawBitmap(0,15,CN,64,49,BLACK,WHITE); //IMPRIMIR, SE IMPRIME EN 0 & 0, LA VARIABLE, ""EL TAMAÑO DE LA IMAGEN "", COLORES 
        display.setCursor(81,20);
         display.setTextSize(1);
         display.println(millis()/1000);
         display.setCursor(70,40);
         display.setTextSize(1);
         display.println("seconds");
        display.display();//LLAMAR EL DISPLAY
        display.clearDisplay(); 
           break;
           case 8:
             delay(dly);
      //IMAGEN 4
       display.clearDisplay();
       display.setRotation(0); //ROTACION DE LA IMAGEN
       display.setCursor(1,1);//UBICACION EN X & Y
       display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
       display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
       display.println("MIKROKOSMO" ); //IMPRIMIR
       display.setCursor(5,5);//UBICACION EN X & Y
       display.println("========================="); //IMPRIMIR
       //AJUSTAR ESTAS MEDIDAS               //"MUY IMPORTANTE PRESTAR ATENCION A LAS DIMENSIONES Y AJUSTAR EN EL GENERADOR DE MATRICES" 
       display.drawBitmap(0,15,OD,64,45,BLACK,WHITE); //IMPRIMIR, SE IMPRIME EN 0 & 0, LA VARIABLE, ""EL TAMAÑO DE LA IMAGEN "", COLORES 
        display.setCursor(81,20);
         display.setTextSize(1);
         display.println(millis()/1000);
         display.setCursor(70,40);
         display.setTextSize(1);
         display.println("seconds");
       display.display();//LLAMAR EL DISPLAY
       display.clearDisplay();
          break;
    case 9:
             
      //IMAGEN 4
       display.clearDisplay();
       display.setRotation(0); //ROTACION DE LA IMAGEN
       display.setCursor(1,1);//UBICACION EN X & Y
       display.setTextColor(WHITE); //ESTABLECE EL COLOR DE LA IMAGEN
       display.setTextSize(1); //ESTABLECE EL TAMAÑO DE LA IMAGEN
       display.println("MIKROKOSMO" ); //IMPRIMIR
       display.setCursor(5,5);//UBICACION EN X & Y
       display.println("========================="); //IMPRIMIR
       //AJUSTAR ESTAS MEDIDAS               //"MUY IMPORTANTE PRESTAR ATENCION A LAS DIMENSIONES Y AJUSTAR EN EL GENERADOR DE MATRICES" 
       display.drawBitmap(0,15,OD,64,45,BLACK,WHITE); //IMPRIMIR, SE IMPRIME EN 0 & 0, LA VARIABLE, ""EL TAMAÑO DE LA IMAGEN "", COLORES 
        display.setCursor(81,20);
         display.setTextSize(1);
         display.println(millis()/1000);
         display.setCursor(70,40);
         display.setTextSize(1);
         display.println("seconds");
         display.display();//LLAMAR EL DISPLAY
         display.clearDisplay();
          break;
  }
  }
